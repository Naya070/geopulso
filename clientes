import tkinter as tk
from tkinter import BOTH, DISABLED, END, RIGHT, Y, StringVar, ttk, Radiobutton
from tkinter import messagebox
from turtle import heading, width
from tkinter import ttk
from types import NoneType
from webbrowser import get
from PIL import ImageTk, Image

import tkinter.font as font

from data_base import bd
import mysql.connector



class Clase_clientes(tk.Frame): 
    
    def __init__(self, parent, controller):
		
        tk.Frame.__init__(self, parent) 
        
        print("CLASE_CLIENTES") 


        def mientras():
            pass
        
        def salir():
            self.master.destroy()
            self.master.quit()

        def ir_a_menu():
            controller.show_frame(Clase_menu) # Entrar a la ventana principal
            controller.protocol("WM_DELETE_WINDOW", salir)
        
        def widgets_clase_clientes():
            self.config(bg="#ecf0f6", width=2440, height=300)

            self.frame_fondo = tk.Frame(self)
            self.frame_fondo.pack(expand=True)
            self.frame_fondo.config(bg="#ecf0f6", width=1440, height=500)
            

            self.frame_1 = tk.Frame(self.frame_fondo)
            self.frame_1.pack(fill=tk.BOTH, side=tk.TOP)
            self.frame_1.config(bg="#ecf0f6", width=1440, height=400)

            self.label_a= tk.Label(self.frame_1, bg="#ecf0f6", relief=tk.SUNKEN)
            self.label_a.place(x=10, y=90, width=350, height= 300)

            self.label_b= tk.Label(self.frame_1,bg="#ecf0f6", relief=tk.SUNKEN)
            self.label_b.place(x=365,y=90, width=290, height= 300)

            self.label_c= tk.Label(self.frame_1,bg="#ecf0f6", relief=tk.SUNKEN)
            self.label_c.place(x=660,y=90, width=355, height= 300)

                #Buttons
            self.button_proyectos = tk.Button(self, text="Proyectos", command = lambda:controller.show_frame(mientras), width=20, height=1 ).place(x = 0, y = 0)      
            self.button_proveedores = tk.Button(self, text="Proveedores", command = lambda:controller.show_frame(mientras),width=20, height=1).place(x = 170, y = 0)     
            self.button_material = tk.Button(self, text="Material", command = lambda:controller.show_frame(mientras), width=20, height=1).place(x = 340, y = 0) 
            self.button_equipo = tk.Button(self, text="Equipo", command = lambda:controller.show_frame(mientras), width=20,height=1).place(x=510, y=0)
            self.button_empleados = tk.Button(self, text="Empleados", command = lambda:controller.show_frame(mientras), width=20,height=1).place(x=680, y=0)
            self.button_menu = tk.Button(self, text="Menu", command = lambda:controller.show_frame(Clase_menu), width=20,height=1).place(x=850, y=0)

            self.anadir = tk.Button(self, text="Añadir cliente", command = self.actualizar, width=15, height=2).place(x = 680, y = 250) 
            self.actualizar_b = tk.Button(self, text="Actualizar", command = self.actualizar, width=15, height=2).place(x = 865, y = 250)
            self.eliminar = tk.Button(self, text="Eliminar cliente", command = self.actualizar, width=15, height=2).place(x = 800, y = 325)   

            self.buscar = tk.Button(self, text="Buscar", command = self.busqueda, width=8, height=1).place(x=920, y=140)  


                #Labels
            self.modificar_datos= tk.Label(self, text="Modificar Datos", font=("Arial"), bg="#ecf0f6" ).place(x=15, y=80)   
            
            self.nombres = tk.Label(self, text="Nombres:", font=("Arial"), bg="#ecf0f6" ).place(x=13, y=120)  
            self.apellidos = tk.Label(self, text="Apellidos:", font=("Arial"), bg="#ecf0f6" ).place(x=13, y=170)
            self.cedula = tk.Label(self, text="Cédula:", font=("Arial"), bg="#ecf0f6" ).place(x=13, y=220)
            self.telefono = tk.Label(self, text="Teléfono:", font=("Arial"), bg="#ecf0f6" ).place(x=13, y=270)
            self.correo= tk.Label(self, text="Correo:", font=("Arial"), bg="#ecf0f6" ).place(x=13, y=320) 

            self.direccion_vivienda = tk.Label(self, text="Direccion de la vivienda:", font=("Arial"), bg="#ecf0f6" ).place(x=370, y=120)
            self.empresa = tk.Label(self, text="Empresa en donde labora:", font=("Arial"), bg="#ecf0f6" ).place(x=370, y=170)
            self.direccion_empresa = tk.Label(self, text="Direccion de la empresa:", font=("Arial"), bg="#ecf0f6" ).place(x=370, y=220)
            
            self.comentarios= tk.Label(self, text="Comentarios:", font=("Arial"), bg="#ecf0f6" ).place(x=370, y=270)
            
                #Entry
            
            
            
            self.nombres_var = StringVar()
            self.apellidos_var = StringVar()
            self.cedula_var = StringVar()
            self.telefono_var = StringVar()
            self.correo_var = StringVar()
            self.direccion_vivienda_var = StringVar()
            self.empresa_var = StringVar()
            self.direccion_empresa_var = StringVar()
            self.comentarios_var = StringVar()
            

            self.buscar_entry_var = StringVar()
            



            
            self.nombres_entry = tk.Entry(self, textvariable= self.nombres_var).place(x=15, y=145, width=250)
            self.apellidos_entry= tk.Entry(self, textvariable= self.apellidos_var).place(x=15, y=195, width=250)
            self.cedula_entry = tk.Entry(self, textvariable= self.cedula_var).place(x=15, y=245, width=250)
            self.telefono_entry = tk.Entry(self, textvariable= self.telefono_var).place(x=15, y=295, width=250)
            self.correo_entry = tk.Entry(self, textvariable= self.correo_var).place(x=15, y=345, width=250)

            self.direccion_vivienda_entry= tk.Entry(self, textvariable= self.direccion_vivienda_var).place(x=370, y=145, width=250)
            self.empresa_entry = tk.Entry(self, textvariable= self.empresa_var).place(x=370, y=195, width=250)
            self.direccion_empresa_entry = tk.Entry(self, textvariable= self.direccion_empresa_var).place(x=370, y=245, width=250)

            self.comentarios_entry = tk.Text(self).place(x=370, y=295, width=250, height= 80)
            
            
            self.buscar = tk.Label(self, text="Buscar", font=("Arial"),
                                bg="#ecf0f6", width=6, height=1).place(x=665, y=120)

            self.buscar_entry = tk.Entry(self, textvariable= self.buscar_entry_var).place(x=665, y=145, width=250)

            # Frame del treeview
            self.frame_treeview = tk.Frame(self.frame_fondo)
            self.frame_treeview.pack(fill=tk.BOTH, side=tk.BOTTOM)
            self.frame_treeview.config(bg="white", width=1440, height=300)


                    # Set the treeview
            self.tree = ttk.Treeview(self.frame_treeview, height=17)

            self.treexscroll = tk.Scrollbar(self.frame_treeview, orient=tk.HORIZONTAL)
            self.treexscroll.pack(fill=tk.X, side=tk.BOTTOM)
            # configurar scrollbar
            self.treexscroll.config(command=self.tree.xview)

            self.treeyscroll = tk.Scrollbar(self.frame_treeview, orient=tk.VERTICAL)
            self.treeyscroll.pack(fill=tk.Y, side=tk.RIGHT)
            # configurar scrollbar
            self.treeyscroll.config(command=self.tree.yview)

            # TREEVIEW
            self.tree.config(xscrollcommand=self.treexscroll.set, yscrollcommand=self.treeyscroll.set,
            columns=(
                    "col1", "col2", "col3", "col4", "col5", "col6", "col7", "col8"))

        
            self.tree.column("#0", width=150, stretch= False)
            self.tree.column("col1", width=150, stretch= False)
            self.tree.column("col2", width=150, stretch= False)
            self.tree.column("col3", width=150, stretch= False)
            self.tree.column("col4", width=160, stretch= False)
            self.tree.column("col5", width=150, stretch= False)
            self.tree.column("col6", width=150, stretch= False)
            self.tree.column("col7", width=150, stretch= False)
            self.tree.column("col8", width=150, stretch= False)
            
        

            
            self.tree.heading("#0", text="Nombres", anchor=tk.CENTER)
            self.tree.heading("col1", text="Apellidos", anchor=tk.CENTER)
            self.tree.heading("col2", text="Cédula", anchor=tk.CENTER)
            self.tree.heading("col3", text="Teléfono", anchor=tk.CENTER)
            self.tree.heading("col4", text="Correo", anchor=tk.CENTER)
            self.tree.heading("col5", text="Direccion de la vivienda", anchor=tk.CENTER)
            self.tree.heading("col6", text="Empresa", anchor=tk.CENTER)
            self.tree.heading("col7", text= "Direccion de la empresa", anchor=tk.CENTER)
            self.tree.heading("col8", text="Comentarios", anchor=tk.CENTER)
            
            

            self.tree.pack()
            self.treeview = self.tree
            
            self.id = 0
            self.iid = 0

            self.mostrar()
            
            
            self.tree.bind('<<TreeviewSelect>>', self.seleccionarUsandoClick)
            self.tree.bind('<<TreeviewSelect>>', self.bindings)
            #self.frame_fondo.bind('<Return>', self.busqueda)
            #self.bindings()
        
        
        widgets_clase_clientes()

    def mostrar(self): #Actualizar treeview luego de modificar
            try:
                self.connection = mysql.connector.connect(
                    host = 'localhost',
                    port = 3306,
                    user = 'root',
                    password = 'tupropiarana',
                    db = 'geopulso'
                )
                
            except Exception as ex:
                print(ex)

            cursor = self.connection.cursor()
            registros = self.tree.get_children()
            for elemento in registros:
                self.tree.delete(elemento)
            try:
                cursor.execute("SELECT * FROM clientes")
                datos_apt = cursor.fetchall()
                self.indice = 0
                
                for row in datos_apt:			
                    self.tree.tag_configure("gray90", background="gray90")
                    self.tree.tag_configure("white", background="white")
                    color = "white" if self.indice % 2 else "gray90"
                    
                    self.tree.insert("",END, tag=('fuente', color), iid=self.indice, text = row[1], values =(row[2], 
                    row[3],row[4], row[5],row[6], row[7],row[8]))
                    self.indice= self.indice+1
                            
            except:
                pass


    def limpiarCampos(self):

            self.nombres_var.set("")
            self.apellidos_var.set("")
            self.cedula_var.set("")
            self.telefono_var.set("")
            self.correo_var.set("")
            self.direccion_vivienda_var.set("")
            self.empresa_var.set("")
            self.direccion_empresa_var.set("")
            self.comentarios_var.set("")
        
	
    def seleccionarUsandoClick(self, event):
            item = self.tree.identify('item', event.x, event.y)
            self.nombres_var.set(self.tree.item(item, "values")[0])
            self.apellidos_var.set(self.tree.item(item, "values")[1])
            self.cedula_var.set(self.tree.item(item, "values")[2])
            self.telefono_var.set(self.tree.item(item, "values")[3])
            self.correo_var.set(self.tree.item(item, "values")[4])
            self.direccion_vivienda_var.set(self.tree.item(item, "values")[5])
            self.empresa_var.set(self.tree.item(item, "values")[6])
            self.direccion_empresa_var.set(self.tree.item(item, "values")[7])
            self.comentarios_var.set(self.tree.item(item, "values")[8])
            print("you clicked on", self.tree.item(item,"text"))
            self.id_c = self.tree.item(item,"text")
            #self.tree.selection_set('0')
			
    def busqueda(self):
            try:
                self.connection = mysql.connector.connect(
                    host = 'localhost',
                    port = 3306,
                    user = 'root',
                    password = 'tupropiarana',
                    db = 'geopulso'
                )
                
            except Exception as ex:
                print(ex)

            cursor = self.connection.cursor()
            
            try:
                self.criterio = self.buscar_entry_var.get()
                self.criterio = "%s" % self.criterio +"%"
                self.datos = cursor.execute("SELECT id FROM clientes WHERE nombres LIKE '%s' OR apellidos LIKE '%s'" % (self.criterio, self.criterio))
                for row in self.datos:
                    self.row_id = row[0]-1
                self.tree.selection_set(self.tree.tag_has(self.row_id)) # move selection
                self.tree.selection_set(self.row_id) # move selection
                self.tree.focus(self.row_id) # move focus
                self.tree.see(self.row_id) # scroll to show it
            except:
                messagebox.showwarning("ADVERTENCIA","Ocurrió un error de búsqueda")
                pass


    def bindings(self, event):
            self.tree.bind("<Button-1>", self.seleccionarUsandoClick)
            


    def actualizar(self):
            try:
                self.connection = mysql.connector.connect(
                    host = 'localhost',
                    port = 3306,
                    user = 'root',
                    password = 'tupropiarana',
                    db = 'geopulso'
                )
                
            except Exception as ex:
                print(ex)
            cursor = self.connection.cursor()
            #datos_apt = cursor.execute("SELECT * FROM Datos_por_apartamento")
            #for row in datos_apt:
            #	print(row)

            try:

                self.s1= self.nombres_var.get()
                self.s2= self.apellidos_var.get()
                self.s3=self.cedula_var.get()
                self.s4=self.telefono_var.get()
                self.s5=self.correo_var.get()
                self.s6=self.direccion_vivienda_var.get()
                self.s7=self.empresa_var.get()
                self.s8=self.direccion_empresa_var.get()
                self.s9=self.comentarios_var.get(1.0, tk.END+"-1c")
                
                
                cursor.execute("""UPDATE clientes
                            SET nombres=?, apellidos=?, cedula=?, telefono=?, 
                            correo=?, direccion_vivienda=?, empresa=?, direccion_empresa=?, 
                            comentarios=? WHERE id_clientes=?""",
                            (self.s1, self.s2, self.s3, self.s4, self.s5, self.s6, self.s7, 
                            self.s8, self.s9, self.id_c))

                self.connection.commit()

            except:
                messagebox.showwarning("ADVERTENCIA","Ocurrió un error al actualizar el registro")
                pass
            self.limpiarCampos()
            self.mostrar()

        
        
        

		
		